require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PagesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Page. As you add validations to Page, be sure to
  # update the return value of this method accordingly.
  def valid_attributes_from_page(page)
    { title: page.title,
      permalink: page.permalink }
  end
  
  def valid_attributes
    valid_attributes_from_page(FactoryBot.build(:page))
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # PagesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all pages as @pages" do
      page = Page.create! valid_attributes
      get :index, params: {}#, valid_session
      expect(assigns(:pages)).to eq([page])
    end
  end

  describe "GET show" do
    it "assigns the requested page as @page" do
      page = Page.create! valid_attributes
      sign_in FactoryBot.create(:user)
      get :show, params: {:id => page.to_param}
      expect(assigns(:page)).to eq(page)
    end
  end

  describe "GET new" do
    it "assigns a new page as @page" do
      sign_in FactoryBot.create(:user)
      get :new, params: {}
      expect(assigns(:page)).to be_a_new(Page)
    end
  end

  describe "GET edit" do
    it "assigns the requested page as @page" do
      page = Page.create! valid_attributes
      sign_in FactoryBot.create(:user)
      get :edit, params: {:id => page.to_param}
      expect(assigns(:page)).to eq(page)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Page" do
        expect {
          sign_in FactoryBot.create(:admin_user) 
          post :create, params: {:page => valid_attributes}
        }.to change(Page, :count).by(1)
      end

      it "assigns a newly created page as @page" do
        sign_in FactoryBot.create(:admin_user) 
        post :create, params: {:page => valid_attributes}
        expect(assigns(:page)).to be_a(Page)
        expect(assigns(:page)).to be_persisted
      end

      it "redirects to the created page" do
        sign_in FactoryBot.create(:admin_user) 
        post :create, params: {:page => valid_attributes}
        expect(response).to redirect_to(Page.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved page as @page" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Page).to receive(:save).and_return(false)
        sign_in FactoryBot.create(:admin_user) 
        post :create, params: {:page => { "title" => "invalid value" }}
        expect(assigns(:page)).to be_a_new(Page)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Page).to receive(:save).and_return(false)
        sign_in FactoryBot.create(:admin_user) 
        post :create, params: {:page => { "title" => "invalid value" }}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested page" do
        page = FactoryBot.create(:page)
        #page = Page.create! valid_attributes
        # Assuming there are no other pages in the database, this
        # specifies that the Page created on the previous line
        # receives the :update message with whatever params are
        # submitted in the request.
        expect_any_instance_of(Page).to receive(:update).with(ActionController::Parameters.new({"title" => "MyString"}).permit!)
        sign_in FactoryBot.create(:admin_user) 
        put :update, params: {:id => page.to_param, :page => { "title" => "MyString" }}
      end

      it "assigns the requested page as @page" do
        page = Page.create! valid_attributes
        sign_in FactoryBot.create(:admin_user) 
        put :update, params: {:id => page.to_param, :page => valid_attributes_from_page(page)}
        expect(assigns(:page)).to eq(page)
      end

      it "redirects to the page" do
        page = Page.create! valid_attributes
        sign_in FactoryBot.create(:admin_user) 
        put :update, params: {:id => page.to_param, :page => valid_attributes_from_page(page)}
        expect(response).to redirect_to(page)
      end
    end

    describe "with invalid params" do
      it "assigns the page as @page" do
        #page = FactoryBot.create(:page)
        page = Page.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Page).to receive(:save).and_return(false)
        sign_in FactoryBot.create(:admin_user) 
        
        put :update, params: {:id => page.to_param, :page => { "title" => "invalid value" }}
        expect(assigns(:page)).to eq(page)
      end

      it "re-renders the 'edit' template" do
        #page = FactoryBot.create(:page)
        page = Page.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Page).to receive(:save).and_return(false)
        sign_in FactoryBot.create(:admin_user) 

        put :update, params: {:id => page.to_param, :page => { "title" => "invalid value" }}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested page" do
      page = Page.create! valid_attributes

      expect {
        sign_in FactoryBot.create(:admin_user) 
        delete :destroy, params: {:id => page.to_param}
      }.to change(Page, :count).by(-1)
    end

    it "redirects to the pages list" do
      page = Page.create! valid_attributes
      sign_in FactoryBot.create(:admin_user) 
      delete :destroy, params: {:id => page.to_param}
      expect(response).to redirect_to(pages_url)
    end
  end

end
